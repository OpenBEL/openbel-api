#%RAML 0.8
title: OpenBEL Platform
version: 0.0.2
baseUri: http://next.belframework.org/api
schemas:
  - annotation_resource:         !include http://next.belframework.org/schema/annotation_resource.schema.json
  - annotation_collection:       !include http://next.belframework.org/schema/annotation_collection.schema.json
  - annotation_value_resource:   !include http://next.belframework.org/schema/annotation_value_resource.schema.json
  - annotation_value_collection: !include http://next.belframework.org/schema/annotation_value_collection.schema.json
  - completion:                  !include http://next.belframework.org/schema/completion.schema.json
  - completion_collection:       !include http://next.belframework.org/schema/completion_collection.schema.json
  - evidence:                    !include http://next.belframework.org/schema/evidence.schema.json
  - evidence_resource:           !include http://next.belframework.org/schema/evidence_resource.schema.json
  - evidence_collection:         !include http://next.belframework.org/schema/evidence_collection.schema.json
  - match_result:                !include http://next.belframework.org/schema/match_result.schema.json
  - match_result_collection:     !include http://next.belframework.org/schema/match_result_collection.schema.json
traits:
  - ro_options:
      description: |
        Returns allowable HTTP methods for this <<name>>.
      responses:
        200:
          headers:
            Allow:
              description: Allowable HTTP methods.
              type:        string
              enum:        [ 'OPTIONS', 'GET' ]
documentation:
  - title: Welcome 
    content: |
      The OpenBEL Platform provides an Application Programming Interface (API) exposed over the Hypertext Transfer Protocol (HTTP). The primary goal of the API is to expose OpenBEL capabilities over the web to lower the technical barriers for users.
  - title: Functionality
    content: |
      The API provides the following:
      - Access and Search for BEL Annotations and Namespaces
      - Equivalence and Orthologize BEL expressions
      - Autocomplete syntax of BEL expressions
      - Access BEL Functions and Relationships
      - Store, query, and export BEL Evidence
  - title: Planned Functionality
    content: |
      We are currently working on the following:
      - Autocomplete with BEL expression semantics (e.g. namespace encoding, term signatures, etc.)
      - Creation of BEL knowledge networks from the Evidence collection
/api:
  description: |
    Root resource of the API. Lists all subresources contained within the API.
  options:
    is: [
      ro_options: { name: "root resource" }
    ]
  get:
    description: |
      Returns a list of linked *item* resources.
    responses:
      200:
        body:
          application/hal+json:
            example: !include examples/root.example.json
/annotations:
  description: |
    Annotation collection within the API. 

    This provides access to BEL annotation vocabularies such as MeSH, Gene Ontology, and Disease Ontology.

    BEL Evidence can be annotated to express knowledge about the evidence itself. Some important uses of annotations are:
      - Specify information about the biological system in which the facts represented by the statement hold or were demonstrated.
      - Specify information about the experimental methods used to demonstrate the facts.
      - Specify information about the knowledge source on which the statement is based, such as the citation and the specific text supporting the statement.
  options:
    is: [
      ro_options: { name: "annotation_collection" }
    ]
  get:
    description: |
      Returns the *annotation_collection* containing an array of all *annotation* resources.

      An *annotation* resource contains fields:
      - prefLabel: human-readable name
      - prefix:    short prefix
      - domain:    biological domain
      - 

      The collection contains zero or more *annotation* resource objects. If the *annotation_collection* is empty then the result is an empty array.

    responses:
      200:
        description: |
          **JSON Schema**
          - [annotation_collection](schemas/annotation_collection.schema.json)
          - [annotation](schemas/annotation_resource.schema.json)
        body:
          application/json:
            example: !include examples/annotation_collection.example.json
  /values:
    description: |
      Annotation Value collection for all Annotation resources within the API.

      This provides a collection of all BEL annotation values that can be listed and filtered.
    options:
      is: [
        ro_options: { name: "annotation_value_collection" }
      ]
    get:
      description: |
        Returns the *annotation_value_collection* across all *annotation* resources.

        Example: *Search by filter*

        <br>
         **Limitations**
        
         This endpoint is limited to full-text searching including a *filter* like:
         ```json
         {
             "category": "fts",
             "name":     "search",
             "value":    "sarcoma"
         }
         ```

        <br>
        **Complete Example**
        
        **<sub>GET http://next.belframework.org/api/annotations/values?filter={%22category%22:%22fts%22,%22name%22:%22search%22,%22value%22:%22sarcoma%22}&start=0&size=3</sub>**
        
        ```json
        {
          "annotation_value_collection": [
            {
              "annotation_value": {
                "type": "BiologicalProcessConcept",
                "identifier": "D012509",
                "name": "Sarcoma",
                "_links": {
                  "self": {
                    "type": "annotation_value",
                    "href": "http://next.belframework.org/api/annotations/mesh-diseases/values/D012509"
                  },
                  "collection": {
                    "type": "annotation",
                    "href": "http://next.belframework.org/api/annotations/mesh-diseases"
                  }
                }
              }
            },
            {
              "annotation_value": {
                "type": "BiologicalProcessConcept",
                "identifier": "1115",
                "name": "sarcoma",
                "_links": {
                  "self": {
                    "type": "annotation_value",
                    "href": "http://next.belframework.org/api/annotations/disease-ontology/values/1115"
                  },
                  "collection": {
                    "type": "annotation",
                    "href": "http://next.belframework.org/api/annotations/disease-ontology"
                  }
                }
              }
            },
            {
              "annotation_value": {
                "type": "BiologicalProcessConcept",
                "identifier": "D008223",
                "name": "Lymphoma",
                "_links": {
                  "self": {
                    "type": "annotation_value",
                    "href": "http://next.belframework.org/api/annotations/mesh-diseases/values/D008223"
                  },
                  "collection": {
                    "type": "annotation",
                    "href": "http://next.belframework.org/api/annotations/mesh-diseases"
                  }
                }
              }
            }
          ]
        }
        ```

      queryParameters:
        start:
          type: integer
          description: |
            The annotation value resource to start from for paging purposes.
          example:  "0"
          required: false
        size:
          type: integer
          description: |
            The size of the annotation value resource collection to retrieve. This will return a slice of the annotation value resource collection relative to *start*.

            A size of zero or less will return all values.
          example:  3
          required: false
        filter:
          type: string
          description: |
            A filter to apply to the annotation value resource collection to narrow the resources retrieved.
          example: |
            {"category":"fts","name":"search","value":"sarcoma"}
          required: false
        faceted:
          type: string
          description: |
            The boolean indicator to provided faceted results for the annotation value resource collection. The default is to not facet.
          enum: [ 'true', 'yes', '1', 'on' ]
          example: no
      responses:
        200:
          description: |
            **JSON Schema**
            - [annotation_value_collection](schemas/annotation_value_collection.schema.json)
            - [annotation_value](schemas/annotation_value_resource.schema.json)
          body:
            application/json:
              example: !include examples/annotation_values_filter.example.json
        400:
          description: |
            *400 Bad Request*

            Returned if a filter is malformed.
        404:
          description: |
            *404 Not Found*

            Returned if no annotation values were found for the FTS search.
          
            Returned if a `{"category":"fts", "name": "search", ...}` filter was not provided.
        501:
          description: |
            *501 Not Implemented*

            Returned if the client enabled the `faceted` query parameter. This is currently not implemented.
  /{annotation}:
    description: |
      Annotation resource identified by *{annotation}* URI parameter. 
    uriParameters:
      annotation:
        type: string
        description: |
          An identifier string for an annotation. This is either the annotation prefix, name, or URI part.
        example: |
          "do" or "Disease Ontology" or "disease-ontology" (all resolve to the same annotation resource)
        required: true
    options:
      is: [
        ro_options: { name: "annotation resource" }
      ]
    get:
      description: |
        Returns the *annotation* resource identified by *{annotation}* URI parameter.
      responses:
        200:
          description: |
            **JSON Schema**
            - [annotation](schemas/annotation_resource.schema.json)
          body:
            application/json:
              example: !include examples/annotation_resource.example.json
    /values:
      description: |
        Annotation Value collection within an Annotation resource identified by *{annotation}*.
      options:
        is: [
          ro_options: { name: "annotation_value_collection" }
        ]
      get:
        description: |
          Returns the *annotation_value_collection* across the *annotation* resource identified by *{annotation}* URI parameter.

          Example: *Search by filter*

          <br>
           **Limitations**
          
           This endpoint is limited to full-text searching including a *filter* like:
           ```json
           {
               "category": "fts",
               "name":     "search",
               "value":    "sarcoma"
           }
           ```

          <br>
          **Complete Example**
          
          **<sub>GET http://next.belframework.org/api/annotations/do/values?filter={%22category%22:%22fts%22,%22name%22:%22search%22,%22value%22:%22sarcoma%22}&start=0&size=3</sub>**
          
          ```json
          {
            "annotation_value_collection": [
              {
                "annotation_value": {
                  "type": "BiologicalProcessConcept",
                  "identifier": "1115",
                  "name": "sarcoma",
                  "_links": {
                    "self": {
                      "type": "annotation_value",
                      "href": "http://next.belframework.org/api/annotations/disease-ontology/values/1115"
                    },
                    "collection": {
                      "type": "annotation",
                      "href": "http://next.belframework.org/api/annotations/disease-ontology"
                    }
                  }
                }
              },
              {
                "annotation_value": {
                  "type": "BiologicalProcessConcept",
                  "identifier": "3071",
                  "name": "gliosarcoma",
                  "_links": {
                    "self": {
                      "type": "annotation_value",
                      "href": "http://next.belframework.org/api/annotations/disease-ontology/values/3071"
                    },
                    "collection": {
                      "type": "annotation",
                      "href": "http://next.belframework.org/api/annotations/disease-ontology"
                    }
                  }
                }
              },
              {
                "annotation_value": {
                  "type": "BiologicalProcessConcept",
                  "identifier": "3382",
                  "name": "liposarcoma",
                  "_links": {
                    "self": {
                      "type": "annotation_value",
                      "href": "http://next.belframework.org/api/annotations/disease-ontology/values/3382"
                    },
                    "collection": {
                      "type": "annotation",
                      "href": "http://next.belframework.org/api/annotations/disease-ontology"
                    }
                  }
                }
              }
            ]
          }
          ```
        queryParameters:
          start:
            type: integer
            description: |
              The annotation value resource to start from for paging purposes.
            example:  "0"
            required: false
          size:
            type: integer
            description: |
              The size of the annotation value resource collection to retrieve. This will return a slice of the annotation value resource collection relative to *start*.

              A size of zero or less will return all values.
            example:  3
            required: false
          filter:
            type: string
            description: |
              A filter to apply to the annotation value resource collection to narrow the resources retrieved.
            example: |
              {"category":"fts","name":"search","value":"sarcoma"}
            required: false
          faceted:
            type: string
            description: |
              The boolean indicator to provided faceted results for the annotation value resource collection. The default is to not facet.
            enum: [ 'true', 'yes', '1', 'on' ]
            example: no
        responses:
          200:
            description: |
              **JSON Schema**
              - [annotation_value_collection](schemas/annotation_value_collection.schema.json)
            body:
              application/json:
                example: !include examples/annotation_value_collection.example.json
          400:
            description: |
              *400 Bad Request*

              Returned if a filter is malformed.
          404:
            description: |
              *404 Not Found*

              Returned if no annotation values were found for the FTS search.
            
              Returned if a `{"category":"fts", "name": "search", ...}` filter was not provided.
          501:
            description: |
              *501 Not Implemented*

              Returned if the client enabled the `faceted` query parameter. This is currently not implemented.
      /{value}:
        description: |
          Annotation value resource identified by *{annotation}* and *{value}* URI parameters.
        options:
          is: [
            ro_options: { name: "annotation_value resource" }
          ]
        get:
          description: |
            Returns the *annotation_value* resource identified by *{annotation}* and *{value}* URI parameters.

            **Complete Example**
            
            **<sub>GET http://next.belframework.org/api/annotations/do/values/sarcoma</sub>**

            ```json
            {
              "annotation_value": {
                "type": "BiologicalProcessConcept",
                "identifier": "1115",
                "name": "sarcoma",
                "_links": {
                  "self": {
                    "type": "annotation_value",
                    "href": "http://next.belframework.org/api/annotations/disease-ontology/values/1115"
                  },
                  "collection": {
                    "type": "annotation",
                    "href": "http://next.belframework.org/api/annotations/disease-ontology"
                  }
                }
              }
            }
            ```
          responses:
            200:
              description: |
                **JSON Schema**
                - [annotation_value](schemas/annotation_value_resource.schema.json)
              body:
                application/json:
                  example: !include examples/annotation_value_resource.example.json
            404:
              description: |
                *404 Not Found*

                Returned if a resource was not found by *{annotation}* and *{value}*.
/evidence:
  description: |
    Evidence collection within the API.

    This provides storage and query of Evidence resources.

    BEL Evidence represents a biological finding extracted from scientific literature. It is comprised of 5 parts:
      - Citation

        Identifies the reference (e.g. PubMed, Book, Journal, etc.) that contains supporting the *Summary Text*.

      - Summary Text

        The excerpt from the *Citation* that the *BEL Statement* is extracted from.

      - BEL Statement

        An expression that represents knowledge of the existence of biological entities and relationships between them that are known to be observed within a particular *Experiment Context*. The structure of a BEL Statement is explained further on the [OpenBEL Wiki](http://wiki.openbel.org/display/BLVD/Statements).

      - Experiment Context

        Data (Key/Value) that describes parameters of the experiment. For example an evidence observed in the lung of a human could include Uberon's *lung* concept (i.e. [uberon/UBERON:0002048](http://identifiers.org/uberon/UBERON:0002048)) and NCBI Taxonomy's *homo sapiens* concept (i.e. [taxonomy/9606](http://identifiers.org/taxonomy/9606)) respectively.

      - Metadata

        Data (Key/Value) about this evidence resource useful for bookkeeping or system integration purposes. For example one might want to capture a *Reviewer* and *Review Status* to track who is reviewing and this evidence's status respectively.

      - References

        States the vocabularies which the namespace and annotation values are drawn from. Each vocabulary should include a keyword and URI.

  options:
    description: Returns allowable HTTP methods.
    responses:
      200:
        headers:
          Accept:
            description: Allowable HTTP methods.
            type:        string
  post:
    description: |
      Creates one or more Evidence resource within the API.

      The formats are supported:
      - Evidence JSON
        - media type: `application/json`
      - BEL Script
        - media type: `application/bel`
      - XBEL (XML)
        - media type: `application/xml`
      - [BEL JSON Graph Format](http://jsongraphformat.info/)
        - media type: `application/vnd.jgf+json`
      - BEL RDF
        - media type
          - `application/n-quads`
          - `application/n-triples`
          - `application/rdf+xml`
          - `application/turtle`
          - `application/x-turtle`
          - `text/turtle`

      Include a *profile* parameter in the *Content-Type* header to convey the schema evidence schema for the JSON document.

      *Example*:

      - `Content-Type: application/json; profile=http://next.belframework.org/schema/evidence.schema.json`
    responses:
      201:
        description: |
          *201 Created*

          The Evidence resource was created.

          The link to the evidence resource is conveyed is the *Link* header. This will only be set when a single Evidence resource is created.
      415:
        description: |
          *415 Unsupported Media Type*

          The evidence resource body was not a supported media type..
    body:
      application/json:
        schema: evidence
        example: |
          {
            "evidence": {
              "bel_statement": "a(CHEBI:\"reactive oxygen species\") increases r(HGNC:JUN)",
              "citation": {
                "type": "PubMed",
                "name": "Free Radic Biol Med 2000 Feb 1 28(3) 463-99",
                "id": "10699758"
              },
              "experiment_context": [
                {
                  "name":  "species",
                  "value": "9606"
                },
                {
                  "name":  "disease",
                  "value": "leukemia"
                }
              ],
              "metadata": {
                "status": "Approved"
              }
            }
          }
  get:
    description: |
      Retrieve the evidence resource collection.

      All evidence resources will be returned by default.

      The collection can be returned page by page by providing a *start* (defaults to `0`) index and *size* (defaults to no size limit) to return.

      This collection can be filtered by providing one or more *filter* options. A filter specifies the *category*, *name*, and *value* of the filter and is encoded as a JSON object. For example an evidence metadata filter might be encoded as:

      ```json
        {
          "category": "metadata",
          "name": "status",
          "value": "Approved"
        }
      ```

      This collection can be filtered using by a full-text search filter such as:

      ```json
        {
          "category": "fts",
          "name": "search",
          "value": "lung liver pancreas"
        }
      ```

      ```json
        {
          "category": "fts",
          "name": "search",
          "value": "\"subdural hematoma\""
        }
      ```

      This collection can specify the *faceted* boolean option. Facets will reflect all (possibly filtered) evidence resources irrespective of *start* and *size* paging.
      
      Facts are an array of facet objects that are composed of a *filter* and *count*. For example for the evidence metadata filter the facet object would be encoded as:

      ```json
        {
          "category": "metadata",
          "name": "status",
          "value": "Approved",
          "filter": "{\"category\": \"metadata\", \"name\": \"status\", \"value\": \"Approved \"}",
          "count": 10200
        }
      ```

      The *filter* property value can be used as a *filter* option. This is intended to support filtering the evidence resource collection by selected facets.

      The *max_values_per_facet* option can be specified to limit the number of returned facet values by category, name pairs. For example, setting *max_values_per_facet* to `2` would return up to 2 distinct facets values for `{ "category": "citation", "name": "id", ... }`.
    headers:
      Accept:
        displayName: Accept
        description: |
          The Accept header informs the server which media types the client accepts.
    queryParameters:
      start:
        type: integer
        description: |
          The evidence resource to start from for paging purposes.
          
          The default value is `0`. This value will return evidence resources starting from the beginning of collection.
        example: 100
        required: false
      size:
        type: integer
        description: |
          The size of the evidence resource collection to retrieve. This will return a slice of the evidence resource collection relative to *start*.

          The default is `0`. This value will return all evidence resources in the collection.
        example: 100
        required: false
      filter:
        type: string
        description: |
          A filter to apply to the evidence resource collection to narrow the resources retrieved.

          The default is to not apply filters. If filters are not specified then all evidence resources, in the collection, will be returned.
        example: |
          {"category":"experiment_context","name":"Anatomy","value":"prostate gland"}
          {"category":"fts","name":"search","value":"\"subdural hematoma\" carcinoma"}
          {"category":"fts","name":"search","value":"homatoma -carcinoma"}
        required: false
      faceted:
        type: string
        description: |
          The boolean indicator to provided faceted results for the evidence resource collection.
          
          The default is `false`. This value will not return facets in the response.
        enum: [ 'true', 'yes', '1', 'on' ]
        example: yes
      max_values_per_facet:
        type: integer
        description: |
          The maximum about of facet values to display for every category, name pair.
          
          The default is `0`. This value will return all facet values (i.e. unbounded) for every category, name pair.
        example: 20
        required: false
    responses:
      200:
        description: |
          An example request for this resource might be:

          - Path: `/api/evidence`
          - Query parameters:
            - `start=0`
            - `size=1`
            - `faceted=yes`
            - `max_values_per_facet=1`
            - `filter`
            ```json
            {
              "category":"experiment_context",
              "name":"Anatomy",
              "value":"prostate gland"
            }
            ```

        body:
          application/json:
            schema: evidence_collection
            example: |
              {
                "evidence_collection": [
                  {
                    "evidence": {
                      "bel_statement": "p(HGNC:CDH1) decreases cat(complex(p(HGNC:ITGAV),p(HGNC:ITGB5)))",
                      "citation": {
                        "type": "Other",
                        "name": "Landes Bioscience - Altered Integrin Expression in Three Common Types of Human Cancer=Breast Cancer",
                        "id": "Landes Bioscience - Altered Integrin Expression in Three Common Types of Human Cancer=Breast Cancer"
                      },
                      "experiment_context": {
                        "species": "9606"
                      },
                      "metadata": {
                        "status": "Review"
                      }
                    },
                    "links": {
                      "self": {
                        "type": "evidence",
                        "href": "http://localhost:9000/api/evidence/560951418a4cca3a38000001"
                      },
                      "collection": {
                        "type": "evidence_collection",
                        "href": "http://localhost:9000/api/evidence"
                      }
                    }
                  }
                ],
                "facets": [
                  {
                    "category": "experiment_context",
                    "name": "Species",
                    "value": "9606",
                    "filter": "{\"category\":\"context\",\"name\":\"Species\",\"value\":\"9606\"}",
                    "count": 49071
                  },
                  {
                    "category": "metadata",
                    "name": "status",
                    "value": "Review",
                    "filter": "{\"category\":\"metadata\",\"name\":\"status\",\"value\":\"Review\"}",
                    "count": 18954
                  },
                  {
                    "category": "experiment_context",
                    "name": "Anatomy",
                    "value": "liver",
                    "filter": "{\"category\":\"context\",\"name\":\"Anatomy\",\"value\":\"liver\"}",
                    "count": 2357
                  }
                ],
                "metadata": {
                  "collection_paging": {
                    "total": 52405,
                    "total_filtered": 52405,
                    "total_pages": 52405,
                    "current_page": 1,
                    "current_page_size": 1
                  }
                }
              }
  /{identifier}:
    description:
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
    get:
    put:
      description: |
        Replaces an evidence resource identified by *{identifier}*.

        Include a *profile* parameter in the *Content-Type* header to convey the schema evidence schema for the JSON document.

        *Example*:

        - `Content-Type: application/json; profile=http://next.belframework.org/schema/evidence_resource.schema.json`
      body:
        application/json:
          schema: evidence_resource
          example: |
            {
              "evidence": {
                "bel_statement": "a(CHEBI:\"reactive oxygen species\") increases r(HGNC:JUN)",
                "citation": {
                  "type": "PubMed",
                  "name": "Free Radic Biol Med 2000 Feb 1 28(3) 463-99",
                  "id": "10699758"
                },
                "experiment_context": {
                  "Species": "9606",
                  "CellLine": "LNCAP cell",
                  "Anatomy": "prostate gland",
                  "Cell": "fibroblast",
                  "Disease": "leukemia"
                },
                "metadata": {
                  "status": "Approved"
                }
              }
            }
      responses:
        202:
          description: |
            *202 Accepted*

            The replacement for the evidence resource will be applied.
        404:
          description: |
            *404 Not Found*

            An evidence resource, identified by *{identifier}*, does not exist.
        415:
          description: |
            *415 Unsupported Media Type*

            The evidence resource body was not a supported media type.
    patch:
    delete:
/expressions:
  /{bel}/completions:
    description: |
      Retrieve completions for the *BEL* expression fragment. The caret position to complete from defaults to the end of *BEL* expression fragment.

      Examples:

        - *aabund* yields functions *microRNAAbundance* and *rnaAbundance*
        - *p(H* yields functions *chaperoneActivity*, *pathology*, *phosphataseActivity* and namespace prefixes *CHEBI*, *CHEBIID*, *HGNC*, *MESHCS*, *MESHD*, *MESHPP*, *SCHEM*
        - *tscript(p(HGNC:* yields namespace values *AKT1*, *AKT2*, etc.

      Custom Caret Position:

      The caret position can be provided to indicate where to complete from.

      Examples:

        - *pro(HGNC:*, *caret_position*: `2` yields functions *biologicalProcess*, *products*, *proteinAbundance*, and *proteinModification*
    uriParameters:
      bel:
        type: string
        description: BEL statement fragment; Completions will be provided for this input.
        required: false
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
    get:
      description: |
        Retrieve completions for the *BEL* expression fragment. The caret position to complete from defaults to the end of *BEL* expression fragment.

        Examples:

        - *aabund* yields functions *microRNAAbundance* and *rnaAbundance*
        - *p(H* yields functions *chaperoneActivity*, *pathology*, *phosphataseActivity* and namespace prefixes *CHEBI*, *CHEBIID*, *HGNC*, *MESHCS*, *MESHD*, *MESHPP*, *SCHEM*
        - *tscript(p(HGNC:* yields namespace values *AKT1*, *AKT2*, etc.

        Custom Caret Position:

        The caret position can be provided to indicate where to complete from.

        Examples:

        - *pro(HGNC:*, *caret_position*: `2` yields functions *biologicalProcess*, *products*, *proteinAbundance*, and *proteinModification*
      headers:
        Accept:
          displayName: Accept
      queryParameters:
        caret_position:
          type: integer
          description: The position of the caret within the *bel* input. Defaults to the right-most caret_position for *bel* (e.g. length of *bel* input).
          example: 0
          required: false
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "completions": [
                    {
                      "type": "namespace_prefix",
                      "label": "HGNC",
                      "value": "HGNC:",
                      "highlight": {
                        "start_position": 2,
                        "end_position": 3,
                        "range_type": "inclusive"
                      },
                      "actions": [
                        {
                          "delete": {
                              "start_position": 2,
                              "end_position": 3,
                              "range_type": "inclusive"
                          },
                          "insert": {
                              "position": 2,
                              "value": "HGNC:"
                          },
                          "move_cursor": {
                              "position": 7
                          }
                        }
                      ]
                    }
                  ]
                }
              schema: completion_collection
  /{bel}/components:
    description: |
      Retrieve the components of a *BEL* expression fragment. Currently this will only return the *subject*, *relationship*, and *object* understood from BEL statement expression.
    uriParameters:
      bel:
        type: string
        description: BEL statement expression to recognize; Components will be returned for this input.
        required: false
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
    get:
      description: |
        Retrieve the components of a *BEL* expression fragment. Currently this will only return the *subject*, *relationship*, and *object* understood from BEL statement expression.

        Examples:

          - *p(HGNC:AKT1)* yields:

            ```json
            {
                "expression_components": {
                    "subject":      "p(HGNC:AKT1)",
                    "relationship": null,
                    "object":       null
                }
            }
            ```

          - *p(HGNC:AKT1) -> bp(MESHPP:Apoptosis)* yields:

            ```json
            {
                "expression_components": {
                    "subject":      "p(HGNC:AKT1)",
                    "relationship": "increases",
                    "object":       "bp(MESHPP:Apoptosis)"
                }
            }
            ```

          - *a(CHEBI:"phosphatidyl-L-serine") increases pep(p(HGNC:F3))* yields:

            ```json
            {
                "expression_components": {
                    "subject":      "a(CHEBI:\"phosphatidyl-L-serine\")",
                    "relationship": "increases",
                    "object":       "pep(p(HGNC:F3))"
                }
            }
            ```

      queryParameters:
      responses:
        200:
          body:
            application/json:
              example: |
                {
                    "expression_components": {
                        "subject":      "p(HGNC:AKT1)",
                        "relationship": "increases",
                        "object":       "bp(MESHPP:Apoptosis)"
                    }
                }
/functions:
  description: Retrieve the BEL function resource collection.
  options:
    description: Returns allowable HTTP methods.
    responses:
      200:
        headers:
          Accept:
            description: Allowable HTTP methods.
            type:        string
  get:
    headers:
      Accept:
        displayName: Accept
    responses:
      200:
/functions/{fx}:
  description: Retrieve a BEL function resource.
  options:
    description: Returns allowable HTTP methods.
    responses:
      200:
        headers:
          Accept:
            description: Allowable HTTP methods.
            type:        string
  get:
    headers:
      Accept:
        displayName: Accept
    responses:
      200:
/namespaces:
  options:
    description: Returns allowable HTTP methods.
    responses:
      200:
        headers:
          Accept:
            description: Allowable HTTP methods.
            type:        string
  /namespaces/{namespace}:
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
  /namespaces/{namespace}/equivalents:
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
    post:
  /namespaces/{namespace}/orthologs:
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
    post:
  /namespaces/{namespace}/{value}:
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
  /namespaces/{namespace}/{value}/equivalents/{target}:
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
  /namespaces/{namespace}/{value}/orthologs/{target}:
    options:
      description: Returns allowable HTTP methods.
      responses:
        200:
          headers:
            Accept:
              description: Allowable HTTP methods.
              type:        string
  # vim: ft=yaml sw=2 ts=2 sts=2 expandtab:
